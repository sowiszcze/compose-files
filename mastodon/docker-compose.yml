version: '3'
# Mastodon stack

# Mastodon Glitch Edition
#
# Page: https://glitch-soc.github.io/docs/
# Repo: https://github.com/glitch-soc/mastodon
# Dckr: https://github.com/glitch-soc/mastodon/pkgs/container/mastodon
# Cmps: https://github.com/glitch-soc/mastodon/blob/main/docker-compose.yml
#
# glitch-soc is a friendly fork of the open-source social media software
# Mastodon, with the aim of providing additional features at the risk of
# potentially less stable software.

services:

  db:
    restart: unless-stopped
    image: postgres:${MASTODON_POASTGRES_TAG:-14-alpine}
    container_name: ${COMPOSE_PROJECT_NAME}-db
    hostname: ${COMPOSE_PROJECT_NAME}-db
    shm_size: 256mb
    networks:
      - default
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - /home/${COMPOSE_PROJECT_NAME}/db:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    restart: unless-stopped
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    hostname: ${COMPOSE_PROJECT_NAME}-redis
    networks:
      - default
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - /home/${COMPOSE_PROJECT_NAME}/redis:/data

# https://kartheektechie.wordpress.com/2016/06/11/elasticsearch-backup-script-with-snapshot-rotation/
  es:
    restart: unless-stopped
    image: docker.elastic.co/elasticsearch/elasticsearch:${MASTODON_ES_TAG:-7.17.4}
    container_name: ${COMPOSE_PROJECT_NAME}-es
    hostname: ${COMPOSE_PROJECT_NAME}-es
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
      - default
      - external_network
      - internal_network
      - exposed
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
      - /home/${COMPOSE_PROJECT_NAME}/elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  web:
    image: ghcr.io/glitch-soc/mastodon:${MASTODON_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}-web
    hostname: ${COMPOSE_PROJECT_NAME}-web
    restart: unless-stopped
    env_file: stack.env
    command: bundle exec puma -C config/puma.rb
    networks:
      - default
      - external_network
      - internal_network
      - proxy
      - exposed
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    depends_on:
      - db
      - redis
      - es
    volumes:
      - /home/${COMPOSE_PROJECT_NAME}/live/public/system:/mastodon/public/system
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${MASTODON_DOMAIN:?FQDN domain not provided}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.certresolver=${CERT_RESOLVER:?Cert resolver name missing}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.service=${COMPOSE_PROJECT_NAME}-web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entrypoints=http,https"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-web.loadbalancer.server.port=3000"

  streaming:
    image: ghcr.io/glitch-soc/mastodon-streaming:${MASTODON_STREAMING_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}-streaming
    hostname: ${COMPOSE_PROJECT_NAME}-streaming
    restart: unless-stopped
    env_file: stack.env
    command: node ./streaming
    networks:
      - default
      - external_network
      - internal_network
      - proxy
      - exposed
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    depends_on:
      - db
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-streaming.rule=Host(`${MASTODON_DOMAIN}`) && PathPrefix(`/api/v1/streaming`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-streaming.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-streaming.tls.certresolver=${CERT_RESOLVER:?Cert resolver name missing}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-streaming.service=${COMPOSE_PROJECT_NAME}-streaming"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-streaming.entrypoints=http,https"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-streaming.loadbalancer.server.port=4000"

  sidekiq:
    image: ghcr.io/glitch-soc/mastodon:${MASTODON_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}-sidekiq
    hostname: ${COMPOSE_PROJECT_NAME}-sidekiq
    restart: unless-stopped
    env_file: stack.env
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - default
      - external_network
      - internal_network
      - exposed
    volumes:
      - /home/${COMPOSE_PROJECT_NAME}/live/public/system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

networks:
  default:
  external_network:
  internal_network:
    internal: true
  proxy:
    external: true
  exposed:
    external: true

volumes:
  db:
  db-tmp:
  redis:
  elasticsearch:
