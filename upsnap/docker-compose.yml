version: '3.9'
name: upsnap
# UpSnap stack

# UpSnap
#
# Page: N/A
# Code: https://github.com/seriousm4x/UpSnap/
# Dckr: https://github.com/seriousm4x/UpSnap/pkgs/container/upsnap
# Cmps: https://github.com/seriousm4x/UpSnap/blob/master/docker-compose.yml
#
# A simple wake on lan web app written with SvelteKit, Go and PocketBase.

services:

  upsnap:
    container_name: ${COMPOSE_PROJECT_NAME}
    image: ghcr.io/seriousm4x/upsnap:${UPSNAP_TAG:-4}
    network_mode: host
    restart: unless-stopped
    volumes:
      - /srv/${COMPOSE_PROJECT_NAME}:/app/pb_data
    # # To use a non-root user, create the mountpoint first (mkdir data) so that it has the right permission.
    # user: 1000:1000
    environment:
    #   - TZ=Europe/Berlin # Set container timezone for cron schedules
    #   - UPSNAP_INTERVAL=@every 10s # Sets the interval in which the devices are pinged
      - UPSNAP_SCAN_RANGE # Scan range is used for device discovery on local network
    #   - UPSNAP_SCAN_TIMEOUT=500ms # Scan timeout is nmap's --host-timeout value to wait for devices (https://nmap.org/book/man-performance.html)
    #   - UPSNAP_PING_PRIVILEGED=true # Set to false if you don't have root user permissions
    #   - UPSNAP_WEBSITE_TITLE=Custom name # Custom website title
    # # dns is used for name resolution during network scan
    # dns:
    #   - 192.18.0.1
    #   - 192.18.0.2
    # # you can change the listen ip:port inside the container like this:
    # entrypoint: /bin/sh -c "./upsnap serve --http 0.0.0.0:5000"
    healthcheck:
      test: curl -fs "http://localhost:8090/api/health" || exit 1
    #   interval: 10s
    # # or install custom packages for shutdown
    # entrypoint: /bin/sh -c "apk update && apk add --no-cache <YOUR_PACKAGE> && rm -rf /var/cache/apk/* && ./upsnap serve --http 0.0.0.0:8090"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${COMPOSE_PROJECT_NAME}.${NETWORK_DOMAIN:?Netowrk domain is not defined}`) || Host(`wol.${NETWORK_DOMAIN}`) || Host(`${COMPOSE_PROJECT_NAME}.${MACHINE_DOMAIN:?Machine domain is not defined}`) || Host(`wol.${MACHINE_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.certresolver=${CERT_RESOLVER:?Cert resolver name missing}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.service=${COMPOSE_PROJECT_NAME}"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entrypoints=http,https"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8090"

networks:
  proxy:
    external: true
  exposed:
    external: true
